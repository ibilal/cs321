/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.util.*;
import java.io.*;
import ast.*;

public class Parser implements ParserConstants {
  public static void main(String [] args) {
    if (args.length < 1) {
      System.out.println("Need a file name as command-line argument.");
      return;
    }
    try {
      FileReader input = new FileReader(args[0]);
      Ast.Program p = new Parser(input).Program();
      input.close();
      System.out.print(p);
    } catch (TokenMgrError e) {
      System.err.println(e);
    } catch (Exception e) {
      System.err.println(e);
    }
  }

//
// PARSER SECTION ---------------------------------------------------------------
//

// Program -> {ClassDecl}
//
  static final public Ast.Program Program() throws ParseException {
  List<Ast.ClassDecl> cl = new ArrayList<Ast.ClassDecl>();
  Ast.ClassDecl c;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = ClassDecl();
                   cl.add(c);
    }
    jj_consume_token(0);
    {if (true) return new Ast.Program(cl);}
    throw new Error("Missing return statement in function");
  }

// ClassDecl -> "class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
//
  static final public Ast.ClassDecl ClassDecl() throws ParseException {
    List<Ast.VarDecl> fields = new ArrayList<Ast.VarDecl>();
    List<Ast.MethodDecl> methods = new ArrayList<Ast.MethodDecl>();
    Ast.VarDecl aField;
    Ast.MethodDecl aMethod;
    Ast.Id className, pid=null;
    jj_consume_token(6);
    className = Id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      pid = Id();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(54);
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      aField = VarDecl();
                                                                                    fields.add(aField);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      aMethod = MethodDecl();
                                                                                                                                   methods.add(aMethod);
    }
    jj_consume_token(55);
        if(pid != null)
            {if (true) return new Ast.ClassDecl(className.nm, pid.nm, fields, methods);}
        else
            {if (true) return new Ast.ClassDecl(className.nm, null, fields, methods);}
    throw new Error("Missing return statement in function");
  }

// MethodDecl -> "public" (ExtType <ID> "(" [Param {"," Param}] ")" "{" {VarDecl} {Stmt} "}" 
//                          | 
//                        "static" "void" "main" "(" "String" "[" "]" <ID> ")" "{" {VarDecl} {Stmt} "}")
//
  static final public Ast.MethodDecl MethodDecl() throws ParseException {
    List<Ast.VarDecl> localVars = new ArrayList<Ast.VarDecl>();
    List<Ast.Stmt> statements = new ArrayList<Ast.Stmt>();
    List<Ast.Param> params = new ArrayList<Ast.Param>();
    Ast.VarDecl aVariable;
    Ast.Stmt aStmt;
    Ast.Param aParam;
    Ast.Id methodName;
    Ast.Type type=null;
    Ast.Id id1=null, id2;
    jj_consume_token(9);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
    case 12:
    case 13:
    case 14:
    case ID:
      type = ExtType();
      id1 = Id();
      jj_consume_token(50);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
      case 13:
      case 14:
      case ID:
        aParam = Param();
                                                         params.add(aParam);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 48:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
          jj_consume_token(48);
          aParam = Param();
                                                                                                 params.add(aParam);
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(51);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(11);
      jj_consume_token(10);
      jj_consume_token(50);
      jj_consume_token(15);
      jj_consume_token(52);
      jj_consume_token(53);
      id2 = Id();
      jj_consume_token(51);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(54);
    label_5:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_5;
      }
      aVariable = VarDecl();
                                                   localVars.add(aVariable);
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
      case 20:
      case 22:
      case 23:
      case 24:
      case ID:
      case 54:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      aStmt = Stmt();
                                                                                               statements.add(aStmt);
    }
    jj_consume_token(55);
        if(id1 != null)
            {if (true) return new Ast.MethodDecl(type, id1.nm, params, localVars, statements);}
        else
            {if (true) return new Ast.MethodDecl(type, "main", params, localVars, statements);}
    throw new Error("Missing return statement in function");
  }

// Param -> Type <ID> 
//
  static final public Ast.Param Param() throws ParseException {
    Ast.Type type;
    Ast.Id name;
    Token tknName;
    type = Type();
    tknName = jj_consume_token(ID);
        name = new Ast.Id(tknName.image);
        {if (true) return new Ast.Param(type, name.nm);}
    throw new Error("Missing return statement in function");
  }

// VarDecl -> Type <ID> ["=" InitExpr] ";"
//  
  static final public Ast.VarDecl VarDecl() throws ParseException {
    Ast.Type type;
    Ast.Id name;
    Ast.Exp init=null;
    type = Type();
    name = Id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
      init = InitExpr();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(47);
       // name = new Ast.Id(tknName.image);
        if(init != null)
            {if (true) return new Ast.VarDecl(type, name.nm, init);}
        else
            {if (true) return new Ast.VarDecl(type, name.nm, null);}
    throw new Error("Missing return statement in function");
  }

// ExtType -> Type | "void"
//
  static final public Ast.Type ExtType() throws ParseException {
    Ast.Type type=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
    case 13:
    case 14:
    case ID:
      type = Type();
      break;
    case 11:
      jj_consume_token(11);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

// Type -> BasicType ["[" "]"] | <ID>
//
  static final public Ast.Type Type() throws ParseException {
    Ast.Type type=null;
    Ast.Id id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
    case 13:
    case 14:
      type = BasicType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        jj_consume_token(53);
                                type = new Ast.ArrayType(type);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      break;
    case ID:
      id = Id();
             type = new Ast.ObjType(id.nm);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

// BasicType -> "int" | "double" | "boolean"
//
  static final public Ast.Type BasicType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
        {if (true) return new Ast.IntType();}
      break;
    case 14:
      jj_consume_token(14);
                                              {if (true) return new Ast.DblType();}
      break;
    case 12:
      jj_consume_token(12);
                                                                                     {if (true) return new Ast.BoolType();}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Stmt -> "{" {Stmt} "}"
//      |  ExtId ["(" [Args] ")" ";" | "[" Expr() "]"] ["=" InitExpr()] ";"
//      |  "if" "(" Expr ")" Stmt ["else" Stmt]
//      |  "while" "(" Expr ")" Stmt
//      |  "System" "." "out" "." "println" "(" [PrArg] ")" ";"
//      |  "return" [Expr] ";"
//
  static final public Ast.Stmt Stmt() throws ParseException {
    List<Ast.Stmt> stmts = new ArrayList<Ast.Stmt>();
    List<Ast.Exp> expressions = new ArrayList<Ast.Exp>();
    Ast.Stmt stmt1=null;
    Ast.Exp extId=null;
    Ast.Field extIdField=null;
    Ast.Id extIdId=null;
    Ast.Exp arrayExpr=null;
    Ast.ArrayElm arrayObj=null;
    Ast.Exp initExpr=null;
    Ast.Exp argsExpr=null;
    Ast.Exp returnExpr=null;
    Ast.Exp whileExpr=null;
    Ast.Stmt whileStmt=null;
    Ast.Exp ifExpr=null;
    Ast.Exp prArgExpr=null;
    Ast.Stmt ifStmt=null;
    Ast.Stmt elseStmt=null;
    List<Ast.Exp> args=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      jj_consume_token(54);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
        case 20:
        case 22:
        case 23:
        case 24:
        case ID:
        case 54:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        stmt1 = Stmt();
                  stmts.add(stmt1);
      }
      jj_consume_token(55);
        {if (true) return new Ast.Block(stmts);}
      break;
    case 19:
    case ID:
      extId = ExtId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
        case 17:
        case 19:
        case INTLIT:
        case DBLLIT:
        case ID:
        case 34:
        case 39:
        case 50:
          args = Args();
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(51);
        jj_consume_token(47);
                    if(extId instanceof Ast.Field){
                        //extIdField = (Ast.Field) extId;
                        {if (true) return new Ast.CallStmt(((Ast.Field)extId).obj, extIdField.nm, args);}
                    }
                    else{
                        extIdId = (Ast.Id) extId;
                        {if (true) return new Ast.CallStmt(new Ast.This(), extIdId.nm, args);}
                    }
        break;
      case 46:
      case 52:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 52:
          jj_consume_token(52);
          arrayExpr = Expr();
          jj_consume_token(53);
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(46);
        initExpr = InitExpr();
        jj_consume_token(47);
                    if(arrayExpr != null)
                    {
                        arrayObj = new Ast.ArrayElm(extId, arrayExpr);
                        {if (true) return new Ast.Assign(arrayObj, initExpr);}
                    }
                    else
                        {if (true) return new Ast.Assign(extId, initExpr);}
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 20:
      jj_consume_token(20);
      jj_consume_token(50);
      ifExpr = Expr();
      jj_consume_token(51);
      ifStmt = Stmt();
      if (jj_2_3(2)) {
        jj_consume_token(21);
        elseStmt = Stmt();
      } else {
        ;
      }
            {if (true) return new Ast.If(ifExpr, ifStmt, elseStmt);}
      break;
    case 22:
      jj_consume_token(22);
      jj_consume_token(50);
      whileExpr = Expr();
      jj_consume_token(51);
      whileStmt = Stmt();
        {if (true) return new Ast.While(whileExpr, whileStmt);}
      break;
    case 24:
      jj_consume_token(24);
      jj_consume_token(49);
      jj_consume_token(25);
      jj_consume_token(49);
      jj_consume_token(26);
      jj_consume_token(50);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
      case 17:
      case 19:
      case INTLIT:
      case DBLLIT:
      case STRLIT:
      case ID:
      case 34:
      case 39:
      case 50:
        prArgExpr = PrArg();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(51);
      jj_consume_token(47);
        {if (true) return new Ast.Print(prArgExpr);}
      break;
    case 23:
      jj_consume_token(23);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
      case 17:
      case 19:
      case INTLIT:
      case DBLLIT:
      case ID:
      case 34:
      case 39:
      case 50:
        returnExpr = Expr();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(47);
            {if (true) return new Ast.Return(returnExpr);}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Args -> Expr {"," Expr}
//
  static final public List<Ast.Exp> Args() throws ParseException {
    List<Ast.Exp> exprs = new ArrayList<Ast.Exp>();
    Ast.Exp expr=null;
    expr = Expr();
               exprs.add(expr);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      jj_consume_token(48);
      expr = Expr();
                                                   exprs.add(expr);
    }
   {if (true) return exprs;}
    throw new Error("Missing return statement in function");
  }

// PrArg -> Expr | <STRLIT>
//
  static final public Ast.Exp PrArg() throws ParseException {
    Ast.Exp expr=null;
    Token tknStrLit=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
    case 17:
    case 19:
    case INTLIT:
    case DBLLIT:
    case ID:
    case 34:
    case 39:
    case 50:
      expr = Expr();
      break;
    case STRLIT:
      tknStrLit = jj_consume_token(STRLIT);
                      expr = new Ast.StrLit(tknStrLit.image.substring(1,tknStrLit.image.length()-1));
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

// InitExpr -> "new" ( BasicType "[" <INTLIT> "]" | <ID> "(" ")" )
//          |  Expr 
//
  static final public Ast.Exp InitExpr() throws ParseException {
    Ast.Type type=null;
    Token tknInt=null;
    Ast.IntLit intLit=null;
    Ast.Id id=null;
    Ast.Exp exp=null;
    Ast.Id tknId;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
      case 13:
      case 14:
        type = BasicType();
        jj_consume_token(52);
        tknInt = jj_consume_token(INTLIT);
        jj_consume_token(53);
                                                   intLit = new Ast.IntLit(Integer.parseInt(tknInt.image)); exp = new Ast.NewArray(type, intLit.i);
        break;
      case ID:
        tknId = Id();
        jj_consume_token(50);
        jj_consume_token(51);
                             exp = new Ast.NewObj(tknId.nm);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 16:
    case 17:
    case 19:
    case INTLIT:
    case DBLLIT:
    case ID:
    case 34:
    case 39:
    case 50:
      exp = Expr();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

// Expr -> AndExpr {"||" AndExpr}
//
  static final public Ast.Exp Expr() throws ParseException {
    Ast.Exp exp=null;
    Ast.Exp exp2=null;
    exp = AndExpr();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_9;
      }
      jj_consume_token(38);
      exp2 = AndExpr();
                                        exp = new Ast.Binop(Ast.BOP.OR, exp, exp2);
    }
     {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

// AndExpr -> RelExpr {"&&" RelExpr}
//
  static final public Ast.Exp AndExpr() throws ParseException {
    Ast.Exp exp=null;
    Ast.Exp exp2=null;
    exp = RelExpr();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
      jj_consume_token(37);
      exp2 = RelExpr();
                                        exp = new Ast.Binop(Ast.BOP.AND, exp, exp2);
    }
     {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

// RelExpr -> ArithExpr {RelOp ArithExpr}
//
  static final public Ast.Exp RelExpr() throws ParseException {
    Ast.Exp exp=null;
    Ast.Exp exp2=null;
    Ast.BOP op=null;
    exp = ArithExpr();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_11;
      }
      op = RelOp();
      exp2 = ArithExpr();
                                                  exp = new Ast.Binop(op, exp, exp2);
    }
     {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

// ArithExpr -> Term {("+"|"-") Term}
//
  static final public Ast.Exp ArithExpr() throws ParseException {
    Ast.Exp exp=null;
    Ast.Exp exp2=null;
    Ast.BOP op=null;
    exp = Term();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
      case 34:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
                     op = Ast.BOP.ADD;
        break;
      case 34:
        jj_consume_token(34);
                                            op = Ast.BOP.SUB;
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp2 = Term();
                                                                             exp = new Ast.Binop(op, exp, exp2);
    }
     {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

// Term -> Factor {("*"|"/") Factor}
//
  static final public Ast.Exp Term() throws ParseException {
    Ast.Exp exp=null;
    Ast.Exp exp2=null;
    Ast.BOP op=null;
    exp = Factor();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
      case 36:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        jj_consume_token(35);
                       op = Ast.BOP.MUL;
        break;
      case 36:
        jj_consume_token(36);
                                              op = Ast.BOP.DIV;
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp2 = Factor();
                                                                                 exp = new Ast.Binop(op, exp, exp2);
    }
     {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

//  Factor -> UnOp Factor
//          | "(" Expr ")"
//          | ExtId [ [ "[" Expr "]" ] | "(" [Args] ")" ]
//          | Literal
//
  static final public Ast.Exp Factor() throws ParseException {
    Ast.Exp unop;
    Ast.Exp factor;
    Ast.Exp exp=null;
    Ast.UOP uop;
    Ast.Exp extId;
    Ast.Exp arrayExpr;
    List<Ast.Exp> args = new ArrayList<Ast.Exp>();
    Ast.Field extIdField;
    Ast.Id extIdId;
    Ast.Exp facExp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
    case 39:
      uop = UnOp();
      facExp = Factor();
                                 exp = new Ast.Unop(uop, facExp);
      break;
    case 50:
      jj_consume_token(50);
      exp = Expr();
      jj_consume_token(51);
      break;
    case 19:
    case ID:
      extId = ExtId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
      case 52:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 52:
          jj_consume_token(52);
          arrayExpr = Expr();
          jj_consume_token(53);
                   // if(arrayExpr != null)
                        exp = new Ast.ArrayElm(extId, arrayExpr);
                  //  else 
                    //    exp = (Ast.Id)extId;

          break;
        case 50:
          jj_consume_token(50);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 16:
          case 17:
          case 19:
          case INTLIT:
          case DBLLIT:
          case ID:
          case 34:
          case 39:
          case 50:
            args = Args();
            break;
          default:
            jj_la1[30] = jj_gen;
            ;
          }
          jj_consume_token(51);
                        if(extId instanceof Ast.Field){
                            extIdField = (Ast.Field) extId;
                            exp = new Ast.Call(extIdField.obj, extIdField.nm, args);
                        }
                        else{
                            extIdId = (Ast.Id) extId;
                            exp = new Ast.Call(new Ast.This(), extIdId.nm, args);
                        }
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      break;
    case 16:
    case 17:
    case INTLIT:
    case DBLLIT:
      exp = Literal();
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

// Literal -> <INTLIT> | <DBLLIT> | "true" | "false"
//
  static final public Ast.Exp Literal() throws ParseException {
    Ast.IntLit intlit=null;
    Ast.DblLit dbllit=null;
    Ast.BoolLit boollit=null;
    Token tknInt, tknDbl=null;
    Ast.Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTLIT:
      tknInt = jj_consume_token(INTLIT);
                   exp = new Ast.IntLit(Integer.parseInt(tknInt.image));
      break;
    case DBLLIT:
      tknDbl = jj_consume_token(DBLLIT);
                    exp = new Ast.DblLit(Double.parseDouble(tknDbl.image));
      break;
    case 16:
      jj_consume_token(16);
           exp = new Ast.BoolLit(true);
      break;
    case 17:
      jj_consume_token(17);
            exp = new Ast.BoolLit(false);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

// ExtId -> ["this" "."] <ID> {"." <ID>} 
//
  static final public Ast.Exp ExtId() throws ParseException {
    Ast.This thisVar=null;
    Ast.Id id1, id2;
    Ast.Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      jj_consume_token(19);
      jj_consume_token(49);
                thisVar = new Ast.This();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    id1 = Id();
        if(thisVar != null)
            exp = new Ast.Field(new Ast.This(), id1.nm);
        else
            exp = new Ast.Id(id1.nm);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_14;
      }
      jj_consume_token(49);
      id2 = Id();
                   exp = new Ast.Field(exp, id2.nm);
    }
     {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

// RelOp -> "=="|"!="|"<"|"<="|">"|">="
//
  static final public Ast.BOP RelOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      jj_consume_token(40);
          {if (true) return Ast.BOP.EQ;}
      break;
    case 41:
      jj_consume_token(41);
            {if (true) return Ast.BOP.NE;}
      break;
    case 42:
      jj_consume_token(42);
           {if (true) return Ast.BOP.LT;}
      break;
    case 43:
      jj_consume_token(43);
            {if (true) return Ast.BOP.LE;}
      break;
    case 44:
      jj_consume_token(44);
           {if (true) return Ast.BOP.GT;}
      break;
    case 45:
      jj_consume_token(45);
            {if (true) return Ast.BOP.GE;}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// UnOp -> "-"|"!"
//
  static final public Ast.UOP UnOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
        {if (true) return Ast.UOP.NEG;}
      break;
    case 39:
      jj_consume_token(39);
                                   {if (true) return Ast.UOP.NOT;}
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Id -> <ID>
//
  static final public Ast.Id Id() throws ParseException {
    Token tkn;
    tkn = jj_consume_token(ID);
              {if (true) return new Ast.Id(tkn.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(14)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(12)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(23)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(24)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(22)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(20)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(21)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(13)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x80,0x200,0x0,0x7000,0x7900,0x1d80000,0x0,0x7800,0x0,0x7000,0x7000,0x1d80000,0x600b0000,0x0,0x0,0xe00b0000,0x600b0000,0x1d80000,0x0,0xe00b0000,0x7000,0x600f0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600b0000,0x0,0x0,0x600b0000,0x60030000,0x80000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x10000,0x1,0x1,0x400001,0x4000,0x1,0x100000,0x1,0x0,0x400001,0x40085,0x100000,0x144000,0x40085,0x40085,0x400001,0x10000,0x40085,0x1,0x40085,0x40,0x20,0x3f00,0x6,0x6,0x18,0x18,0x40085,0x140000,0x140000,0x40085,0x0,0x0,0x20000,0x3f00,0x84,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 39; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
